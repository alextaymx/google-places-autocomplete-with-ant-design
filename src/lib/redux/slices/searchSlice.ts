import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { AppState, AppThunk } from '@/lib/redux/store';
import geocodeByPlaceId from '@/hooks/geocodeByPlaceId';
import { AutocompleteOption } from '@/hooks/useFetchSuggestions';

export interface SearchState {
  inputValue: string;
  status: 'idle' | 'loading' | 'failed';
  suggestions: Array<AutocompleteOption>;
  searchHistory: Array<AutocompleteOption>;
  geocode: {
    lat: number | undefined;
    lng: number | undefined;
  };
}

const initialState: SearchState = {
  inputValue: '',
  status: 'idle',
  suggestions: [],
  searchHistory: [],
  geocode: {
    lat: undefined,
    lng: undefined,
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getGeocodeByPlaceId = createAsyncThunk(
  'search/fetchSuggestions',
  async (placeId: string) => {
    const result = await geocodeByPlaceId(placeId);
    const geocode = result[0];

    const location = geocode?.geometry.location;
    const lat = location?.lat();
    const lng = location?.lng();
    return {
      lat,
      lng,
    };
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    replaceInputValue: (state, action: PayloadAction<string>) => {
      state.inputValue = action.payload;
    },
    replaceSuggestions: (
      state,
      action: PayloadAction<Array<AutocompleteOption>>
    ) => {
      state.suggestions = action.payload;
    },
    clearSearchHistory: (state) => {
      state.searchHistory = [];
    },
    prependSearchHistory: (
      state,
      action: PayloadAction<AutocompleteOption>
    ) => {
      getGeocodeByPlaceId(action.payload.value.place_id);
      state.searchHistory = [action.payload, ...state.searchHistory];
    },
    setGeocode: (state, action: PayloadAction<SearchState['geocode']>) => {
      state.geocode = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getGeocodeByPlaceId.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getGeocodeByPlaceId.fulfilled, (state, action) => {
        state.status = 'idle';
        state.geocode = action.payload;
      });
  },
});

export const {
  replaceInputValue,
  replaceSuggestions,
  prependSearchHistory,
  clearSearchHistory,
  setGeocode,
} = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.search.value)`
export const selectInputValue = (state: AppState) => state.search.inputValue;
export const selectSuggestions = (state: AppState) => state.search.suggestions;
export const selectSearchHistory = (state: AppState) =>
  state.search.searchHistory;

export const selectGeocode = (state: AppState) => state.search.geocode;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const fetchIfDataIsMissing =
  (inputValue: string): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectInputValue(getState());
    const currentSuggestions = selectSuggestions(getState());
    const missingSuggestions =
      !currentSuggestions || !currentSuggestions.length;
    const hasSearchValue = !!currentValue && currentValue.length > 0;
    if (hasSearchValue && missingSuggestions) {
      // api call
      dispatch(replaceInputValue(''));
    }
  };

const searchReducer = searchSlice.reducer;
export default searchReducer;
